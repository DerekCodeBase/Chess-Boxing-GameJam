//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputAndControls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BasicControls"",
            ""id"": ""dfef5ef7-a69d-4cc7-847d-72703b17d3ec"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Value"",
                    ""id"": ""8569b6cd-5b87-4589-8246-d1cdb6bc6305"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dfacf1b-a242-4211-bee6-c8010be82483"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6b619d1-1ba1-4622-8952-a5e1e25f33f0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FightControls"",
            ""id"": ""67e1004f-8414-4ae1-afcd-d6ddec76a784"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""53416d1b-562f-4649-ad7c-145125955e2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84a96f9b-5be3-4171-a93d-56a95f2877de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControls"",
            ""id"": ""2ce8ad53-a97d-424d-b5ab-446b124a2265"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""b045cd6c-30a6-4835-8bfb-00b3767d4045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdd5f781-e7dc-483f-a744-d907ba0d413f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RoomControls"",
            ""id"": ""af62c29a-5524-465c-a28b-c69368d37494"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""cd15aea5-2a2e-48ec-9e06-d416f112c3bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2a08a66-3969-4c97-8f6b-541b356062c0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BasicControls
        m_BasicControls = asset.FindActionMap("BasicControls", throwIfNotFound: true);
        m_BasicControls_Click = m_BasicControls.FindAction("Click", throwIfNotFound: true);
        // FightControls
        m_FightControls = asset.FindActionMap("FightControls", throwIfNotFound: true);
        m_FightControls_Click = m_FightControls.FindAction("Click", throwIfNotFound: true);
        // DialogueControls
        m_DialogueControls = asset.FindActionMap("DialogueControls", throwIfNotFound: true);
        m_DialogueControls_Click = m_DialogueControls.FindAction("Click", throwIfNotFound: true);
        // RoomControls
        m_RoomControls = asset.FindActionMap("RoomControls", throwIfNotFound: true);
        m_RoomControls_Click = m_RoomControls.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicControls
    private readonly InputActionMap m_BasicControls;
    private IBasicControlsActions m_BasicControlsActionsCallbackInterface;
    private readonly InputAction m_BasicControls_Click;
    public struct BasicControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BasicControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_BasicControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_BasicControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicControlsActions set) { return set.Get(); }
        public void SetCallbacks(IBasicControlsActions instance)
        {
            if (m_Wrapper.m_BasicControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_BasicControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public BasicControlsActions @BasicControls => new BasicControlsActions(this);

    // FightControls
    private readonly InputActionMap m_FightControls;
    private IFightControlsActions m_FightControlsActionsCallbackInterface;
    private readonly InputAction m_FightControls_Click;
    public struct FightControlsActions
    {
        private @PlayerControls m_Wrapper;
        public FightControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_FightControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_FightControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightControlsActions set) { return set.Get(); }
        public void SetCallbacks(IFightControlsActions instance)
        {
            if (m_Wrapper.m_FightControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_FightControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_FightControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_FightControlsActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_FightControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public FightControlsActions @FightControls => new FightControlsActions(this);

    // DialogueControls
    private readonly InputActionMap m_DialogueControls;
    private IDialogueControlsActions m_DialogueControlsActionsCallbackInterface;
    private readonly InputAction m_DialogueControls_Click;
    public struct DialogueControlsActions
    {
        private @PlayerControls m_Wrapper;
        public DialogueControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_DialogueControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlsActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueControlsActions instance)
        {
            if (m_Wrapper.m_DialogueControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_DialogueControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public DialogueControlsActions @DialogueControls => new DialogueControlsActions(this);

    // RoomControls
    private readonly InputActionMap m_RoomControls;
    private IRoomControlsActions m_RoomControlsActionsCallbackInterface;
    private readonly InputAction m_RoomControls_Click;
    public struct RoomControlsActions
    {
        private @PlayerControls m_Wrapper;
        public RoomControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_RoomControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_RoomControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RoomControlsActions set) { return set.Get(); }
        public void SetCallbacks(IRoomControlsActions instance)
        {
            if (m_Wrapper.m_RoomControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_RoomControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_RoomControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_RoomControlsActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_RoomControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public RoomControlsActions @RoomControls => new RoomControlsActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IBasicControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IFightControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IDialogueControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IRoomControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
